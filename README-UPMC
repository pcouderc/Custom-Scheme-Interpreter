Authors:
  Remy El Sibaïe - Besognet <besognet.remy@gmail.com>
  Pierrick Couderc <pierrick.couderc@gmail.com>
    students at Université Pierre et Marie Curie


This small interpreter has been modified to be able to use Call/cc, the
quotations and some imperative features (begin and set!), and almost almost
every construct can now be used as primitives and then given as first-order
functions.

The most important case is Call/cc, and the explainations are explained below.

## Build & Run

Simply build with "make", run with ./interpreter (wrapping it in rlwrap seems a 
good solution)

## Modifications

What has been modified:
- Parser/lexer.mll and Parser/parser.mly: many constructs have been removed to
be used as primitives
- ast.ml[i]: added the Callcc, K, Cont_e, Eval_e, Quote_e. The first three are
for Call/cc, the others are the quoted expressions and the evaluation case.
- heap.ml[i]: Many features added:
  - In value, Ast for quoted expression and Cont for reified continuations
  - A global environment, which contains every primitives at start, and will
  contain every expression with "define" and "definerec". There are also the
  functions to use it, to avoid the reference manipulation
- eval_cont.ml[i] contains the eval function, heavily modified to use a call
(or continuation) stack and a value stack, that allows the use of call/cc
- eval.ml: slightly modified to call the eval_with_k from Eval_cont instead of
the eval function
- repl.ml: eval_one modified to allocate in the global env instead of passing a
local env
- test.ml: a program to test the evaluation of the added constructs


## Call/cc and the evaluation function modification

### Evaluation using stack and continuation stack

To be able to use continuations as first-order values, we have to completely
redesign the evaluation process. To do that, we introduce two new parameters in
the evaluation function (named "eval_with_k") : the stack and k.
The stack is, as its name suggests, the stack containing the already evaluated
values. K is also a stack, containing the remaining operations to do, morally
the continuation.
We also extend the AST with a new construct : K, which symbolizes an already
evaluated value, which will be found on the stack. Those operations containing K
are always on the k-stack. An important fact, we always evaluate on a left to
right context.

A small example explains how this works. Consider the expression (+ 2 2).
This is represented as a Binop_e (+, Int_e 2, Int_e 2). The evaluation step is :
- It matches a Binop_e (op, e1, e2), we have to evaluate e1 before e2 and the
operation itself. We push Binop_e (op, K, e2) on the k-stack and evaluate e1.
- We evaluate Int_e i. Since it is a "terminal" value, we push on the stack Int
i, and call the function "cont"
- Cont will inspect the k-stack, if it is empty, it returns the first value of
the stack, else it will evaluate the first operation of the k-stack (it still
passes the stack and k-stack). In our case, the k-stack contains 
[Binop_e (op, K, e2)]
- Our expression matches Binop_e (op, K, e2). We push Binop_e (op, K, K) and
evaluate e2.
- We repeat the Int_e evaluation steps.
- We now matches Binop_e (op, K, K). This means everything have been
evaluated. We pop the stack for the second K, as e2, and pop again as the first
K, as e1. We can now apply the operation op on e1 and e2, and push its result on
the stack and call cont.
- In cont, the k-stack is empty, we then return the last evaluated value,
meaning the first on the stack. Its continuation, in that case, is the repl
print operation.

### Call/cc

This transformation allows then the reification on the continuation, and then
the ability to pass it to a function using call-with-current-continuation
(callcc).
To do that, we add a new value construct : Cont of value list * expr list * env
It represents a continuation, with its associated stack (the first paramater);
its k-stack (the second) and the environment at the reified state.

We also add a new construct to our AST : Cont_e of id, which allows then to find
the reified continuation in the environment. Actually, it is a trick to avoid
the AST type to be dependent of the value type, which is already dependent of
AST.

When we call callcc, we create a Cont with the actual stack, the k-stack and the
envrionment. We then bind it to the same id as the parameter of the function we
pass it. Suppose the following example: (callcc (lambda f (f 2))). It should
return 2, but it is not a really powerful example. It is just simple enough to
be decomposed and explained:
- We evaluate (Callcc_e expr), we push Callcc_e K on the k-stack, and evaluate
expr.
- The evaluation of expr will return a closure and push it on the stack, then
call cont, which will call the evaluation with the first argument of the
k-stack, namely (Callcc_e K).
- We matches Callcc_e K. We pop the stack and matches it : if it is not a
function, we throw a runtime exception. If it is a function (and in our case, it
is), we bind in the environment a Cont with the actual stack, the k-stack and
the environment to the id of the first argument of the function, and we call and
evaluation with : Apply_e (f, [Cont_e i]), which symbolizes the application of a
function to a list of argument.
- We evaluation Apply_e, do our evaluation of f, push it on the stack, etc. We
arrive then at the point were we have to evaluate (f 2)
- It then look like a Apply (Cont_e i, [Int_e 2]). We evaluate Cont_e i, which pushes
the Cont on the stack and push Apply (K, Int_e 2) on the k-stack, then call
cont, etc. Cont_e, when evaluated, will push the value from the environment on
the stack, and K on the k-stack, meaning that, when cont is called, return the
first value on the stack.
- We now evaluate Apply (K, Int_e 2). We evaluate (Int_e 2) to Int 2 (with all
the intermediary operations) and then pop the stack, giving us the 
Cont (stack, k, env). We then call apply, that will apply a value to a value
that can be a function, or a continuation. Since we have a continuation, we will
call cont, using the saved stack, k-stack and env, and push the argument given
to the application on the stack.

This will then return 2. 

 
